#!/usr/bin/python3

# Command Line utility to manage CTF machines.
# Usage:
# ctfm start <name> --ports 4444:tcp 3333:udp 5555:both 2222 \
#   --volumes `pwd`/test:/mnt/test:writable `pwd`/test2:/mnt/test2 --enableX
#   --privileged --memory=1024mb --image ctfm:latest
# ctfm shell <name>
# ctfm stop <name>
# ctfm ls

import argparse

from manage import CtfmManage
import defaults as CtfmDefaults

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Manages Kali Docker environments.')
    subparser = parser.add_subparsers(dest='subparser')
    # Start command
    start_p = subparser.add_parser('start')
    start_p.add_argument('name')
    start_p.add_argument('--image', default=CtfmDefaults.image)
    start_p.add_argument('--memory', default=CtfmDefaults.memory)
    start_p.add_argument('--ports', nargs='+', default=CtfmDefaults.ports)
    start_p.add_argument('--volumes', nargs='+', default=CtfmDefaults.volumes)
    start_p.add_argument('--enableX', default=CtfmDefaults.enableX,
                         action='store_true')
    start_p.add_argument('--privileged', default=CtfmDefaults.privileged,
                         action='store_true')
    start_p.add_argument('--command', nargs='*',
                         default=CtfmDefaults.startCommand)
    # Stop Command
    stop_p = subparser.add_parser('stop')
    stop_p.add_argument('name')
    # Shell Command
    shell_p = subparser.add_parser('shell')
    shell_p.add_argument('name')
    shell_p.add_argument('--user', default=CtfmDefaults.user)
    shell_p.add_argument('--command', nargs='*',
                         default=CtfmDefaults.shellCommand)
    # ls command
    shell_p = subparser.add_parser('ls')
    args = parser.parse_args()
    ctfm = CtfmManage()
    # Run whatever the user told us to do.
    if args.subparser == 'start':
        details = ctfm.start(
            args.name,
            privileged=args.privileged,
            enableX=args.enableX,
            volumes=args.volumes,
            ports=args.ports,
            memory=args.memory,
            image=args.image,
            command=args.command
        )
        print("{} {}".format(details.short_id, details.name))
    elif args.subparser == 'shell':
        ctfm.shell(args.name, command=" ".join(args.command), user=args.user)
    elif args.subparser == 'stop':
        print(ctfm.stop(args.name))
    elif args.subparser == 'ls':
        for container in ctfm.ls():
            print(container.short_id,container.name)
